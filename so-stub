#!/usr/bin/perl

use strict;
use warnings;
use feature qw(say);

use File::Basename;
use File::Temp;

sub mlog {
	my $what = shift;
	say 'P: ' . $what . ' ...';
}

sub ilog {
	my $what = shift;
	say 'I: ' . $what;
}

sub wlog {
	my $what = shift;
	say 'W: ' . $what;
}

sub elog {
	my $what = shift;
	die('E: ' . $what);
}

sub process_symbol_table {
	my $path = shift;
	my $mode = shift;
	my $callback = shift;

	mlog("Reading symbol table of $path");

	my $nm_opt_args = ($mode eq 'caller' ? '--undefined-only' : '--defined-only --print-size');
	my $symbol_table = `nm $path --dynamic $nm_opt_args`;

	for my $line (split /\n/, $symbol_table) {
		chomp($line);
		my @parts = split / /, $line;
		if ($mode eq 'caller' or (scalar(@parts) == 4)) {
			$callback->($parts[-1]);
		}
	}
}

sub process_ldd {
	my ($main_caller_path, $lib_prefix) = @_;

	mlog("Processing dynamic dependencies of $main_caller_path");
	my $caller_ldd_ouptut = `ldd $main_caller_path`;
	($caller_ldd_ouptut =~ m/($lib_prefix[^ ]*) => (.*?) /i)
			or elog("could not find $lib_prefix in dynamic dependencies for $main_caller_path");
	my $lib_file = $1;
	my $lib_path = $2;

	my @all_callers = ($caller_ldd_ouptut =~ m/=> (.*?) /g);
	push @all_callers, $main_caller_path;
	@all_callers = grep { $_ ne $lib_path } @all_callers;

	return ($lib_path, \@all_callers);
}

sub get_lib_id {
	my $result = shift;
	$result =~ s/\.so.*//;
	$result =~ s/[^0-9a-z]+//gi;
	return $result;
}

my ($main_caller_path, $lib_prefix, $lang) = @ARGV;

my ($lib_path, $all_callers) = process_ldd($main_caller_path, $lib_prefix);
my $output_file = basename($lib_path);
my $lib_id = get_lib_id($output_file);
ilog("Will create a stub library for $lib_id ($output_file) used in $main_caller_path");

my %caller_symbol_set;
for my $caller_path (@$all_callers) {
	process_symbol_table($caller_path, 'caller', sub {
		my $symbol = shift;
		$caller_symbol_set{$symbol} = 1;
	});
}

my @used_symbols;
my $unused_symbol_count = 0;
process_symbol_table($lib_path, 'lib', sub {
	my $symbol = shift;
	if (defined $caller_symbol_set{$symbol}) {
		push @used_symbols, $symbol;
	} else {
		++$unused_symbol_count;
	}
});
my $used_symbol_count = scalar(@used_symbols);
ilog("Used symbols: $used_symbol_count, unused symbols: $unused_symbol_count");
if ($used_symbol_count == 0) {
	wlog("no used symbols found, stub library will be empty");
}

ilog("Output file: $output_file");
my $function_name = "so_stub_for_$lib_id";
ilog("Stub function name: $function_name");
my $output_path = $output_file;

mlog("Compiling");
my $defsym_args_file = File::Temp->new();
foreach my $sym (@used_symbols) {
	say { $defsym_args_file } "-Wl,--defsym=$sym=$function_name";
}
my $defines = "-DLNAME=\\\"$output_file\\\" -DFNAME=$function_name";
system("g++ -shared -Wall -fPIC $defines stubs.$lang \@$defsym_args_file -o $output_path") == 0
		or elog("compiling failed: $!");

mlog("Stripping");
system("strip $output_path") == 0
		or elog("strip failed: $!");

ilog("Done");

